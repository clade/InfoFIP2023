{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "737b673d",
   "metadata": {},
   "source": [
    "# Fit d'une image\n",
    "\n",
    "Le fichier {download}`data/double_star.txt` contient une image de 64 par 64 pixels d'une étoile double. L'objectif de cette partie est d’ajuster cette image par la somme de deux Gaussiennes afin de déterminer la distance entre les étoiles.\n",
    "\n",
    "\n",
    "1. Charger et afficher le fichier à l'aide de la fonction imshow\n",
    "2. Définir une fonction de fit et tracer une image qui ressemble à celle ci. On pourra utiliser la fonction meshgrid.\n",
    "\n",
    "Il n'est pas possible de travailler directement sur des tableau 2D pour le fit : l'ensemble des intensité de l'image doit être sous forme d'un tableau (taille $N$) ainsi que l'ensemble de coordonnées $(x,y)$ des ces points (tailles $N\\times 2$).\n",
    "\n",
    "3. Ecrire une fonction qui s'adapte au contraite du fit et effectuer le fit. \n",
    "\n",
    "4. Quelle est la distance et son incertitude (en pixel) entre les deux étoiles ?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da1953d8",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "-------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a3e43bbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fe35fc1eb50>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 1\n",
    "import numpy as np\n",
    "from matplotlib.pyplot import figure\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "image = np.loadtxt('data/double_star.txt')\n",
    "\n",
    "fig = figure()\n",
    "ax = fig.subplots()\n",
    "ax.set_aspect(1)\n",
    "ax.imshow(image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c9c232c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fe35db434f0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 2\n",
    "ny, nx = image.shape\n",
    "X,Y = np.meshgrid(range(nx), range(ny))\n",
    "\n",
    "def gaussienne_simple(x, y, amplitude, center_x, center_y, diameter):\n",
    "    return amplitude*np.exp(-((x-center_x)**2 + (y-center_y)**2)/diameter**2)\n",
    "\n",
    "def gaussienne_double(X, Y, amplitudeA, centerA_x, centerA_y, diameterA, amplitudeB, centerB_x, centerB_y, diameterB):\n",
    "    return (gaussienne_simple(X, Y, amplitudeA, centerA_x, centerA_y, diameterA) + \n",
    "            gaussienne_simple(X, Y, amplitudeB, centerB_x, centerB_y, diameterB))\n",
    "p0 = (1, 30, 25, 2, 1, 30, 37, 2)\n",
    "image_test = gaussienne_double(X, Y, *p0)\n",
    "\n",
    "fig = figure()\n",
    "ax = fig.subplots()\n",
    "ax.set_aspect(1)\n",
    "ax.imshow(image_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e91aa9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fe35dac0f40>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 3\n",
    "def gaussienne_double_fit(xdatas, *args):\n",
    "    x, y = xdatas\n",
    "    return gaussienne_double(x, y, *args)\n",
    "\n",
    "popt, cov_mat = curve_fit(gaussienne_double_fit, [X.flatten(), Y.flatten()], image.flatten(), p0=p0)\n",
    "\n",
    "image_fit = gaussienne_double(X, Y, *popt)\n",
    "\n",
    "fig = figure()\n",
    "ax = fig.subplots()\n",
    "ax.set_aspect(1)\n",
    "ax.imshow(image_fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "731501ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La distance entre les étoiles est de 12.464 pixels\n"
     ]
    }
   ],
   "source": [
    "# Question 4\n",
    "amplitudeA, centerA_x, centerA_y, diameterA, amplitudeB, centerB_x, centerB_y, diameterB = popt\n",
    "\n",
    "d = np.sqrt((centerA_x - centerB_x)**2 + (centerA_y - centerB_y)**2)\n",
    "print(f'La distance entre les étoiles est de {d:.3f} pixels')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29d8fc50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L'incertitude est de 0.013 pixels\n"
     ]
    }
   ],
   "source": [
    "var_x = cov_mat[1, 1] + cov_mat[5, 5] - 2*cov_mat[1, 5]\n",
    "var_y = cov_mat[2, 2] + cov_mat[6, 6] - 2*cov_mat[2, 6]\n",
    "\n",
    "std_distance = np.sqrt(var_x + var_y)\n",
    "print(f\"L'incertitude est de {std_distance:.3f} pixels\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6458f19f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
