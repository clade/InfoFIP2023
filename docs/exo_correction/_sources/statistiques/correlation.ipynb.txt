{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "029e46ba",
   "metadata": {},
   "source": [
    "# Corrélation\n",
    "On simule une jeu de données à l'aide du code suivant : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b433007b",
   "metadata": {
    "tags": [
     "keep"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "np.random.seed(0) # pour que le générateur \"aléatoire\" soit \n",
    "                  # le même pour tout le monde\n",
    "N = 100\n",
    "x = np.linspace(2000, 2018, N)\n",
    "y = np.arange(N)*0.2 + 45 + np.random.normal(size=N)\n",
    "\n",
    "plt.plot(x, y, 'o');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa58f021",
   "metadata": {},
   "source": [
    "1. Tracez et ajustez les données par une une droite $y=ax+b$.\n",
    "\n",
    "2. Quel est l’incertitude sur $b$? Qu’en pensez-vous ?\n",
    "\n",
    "3. Calculez la valeur et l’incertitude de votre fit en $x= 2010$.\n",
    "\n",
    "4. Réalisez $M$ simulations ($M$ = 1000 par exemples); tracez sur un graph les coefficients a et b; Calculez la matrice de covariance.\n",
    "\n",
    "5. Trouvez une fonction de fit plus pertinente pour ce problème."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6f461ff",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "-------------------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "542aa1d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.08348182e+00 -2.12175517e+03]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f02977d76d0>]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 1\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "def fit_function(x, a, b):\n",
    "    return a*x + b\n",
    "\n",
    "p_opt, cov_mat = curve_fit(fit_function, x, y)\n",
    "a, b = p_opt\n",
    "print(p_opt)\n",
    "plt.plot(x,fit_function(x,*p_opt))\n",
    "plt.plot(x,y,\"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b06fe309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Incertitude sur b : 38.8\n"
     ]
    }
   ],
   "source": [
    "# Question 2\n",
    "\n",
    "sigma = np.sqrt(np.diag(cov_mat))\n",
    "\n",
    "sigma_a = sigma[0]\n",
    "sigma_b = sigma[1]\n",
    "\n",
    "print(f'Incertitude sur b : {sigma_b:.1f}')\n",
    "# L'incertitude sur b est beaucoup plus importante que l'incertitude\n",
    "# sur chaque point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "08ead99b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valeur en 2010  56.04328983428377\n",
      "Incertitude sans correlations 54.92410215981484\n"
     ]
    }
   ],
   "source": [
    "# Question 3\n",
    "x_test = 2010\n",
    "\n",
    "print('Valeur en 2010 ', a*x_test + b)\n",
    "\n",
    "sigma_y = np.sqrt(x_test**2 * sigma_a**2 + sigma_b**2)\n",
    "print('Incertitude sans correlations', sigma_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb8f72f3",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "Les variables $a$ et $b$ ne sont pas indépendante. La variance de $ax + b$ est donnée par $x^2\\mathrm{Var}(a) + \\mathrm{Var}(b) + 2x\\mathrm{Covar}(a, b)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a174eb17",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Incertitude avec correlations 0.103\n"
     ]
    }
   ],
   "source": [
    "sigma_y = np.sqrt(x_test**2 * sigma_a**2 + sigma_b**2 + 2*x_test*cov_mat[1, 0])\n",
    "print(f'Incertitude avec correlations {sigma_y:.3f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e71aed3",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "Il est donc important de tenir compte des correlations obtenu par le fit pour calculer exactement l'incertitude sur une valeur du fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1f966fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 4\n",
    "def one_simulation():\n",
    "    N = 100\n",
    "    x = np.linspace(2000, 2018, N)\n",
    "    y = np.arange(N)*0.2 + 45 + np.random.normal(size=N)\n",
    "    p_opt, cor_mat = curve_fit(fit_function, x, y)\n",
    "    return p_opt\n",
    "\n",
    "M = 1000\n",
    "many_results = np.array([one_simulation() for _ in range(M)])\n",
    "Ta, Tb = many_results.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1f62bb99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'b')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.subplots(1, 1)\n",
    "\n",
    "ax.scatter(Ta, Tb, s=1)\n",
    "ax.set_xlabel('a')\n",
    "ax.set_ylabel('b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3b1d5b0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.47366872e-04 -6.97875508e-01]\n",
      " [-6.97875508e-01  1.40207350e+03]]\n"
     ]
    }
   ],
   "source": [
    "cov_numerique = np.cov(many_results.T)\n",
    "print(cov_numerique)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b8b088e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.73523915e-04, -7.50409536e-01],\n",
       "       [-7.50409536e-01,  1.50758303e+03]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cov_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "51adbf46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valeur en 2010  56.04328985689939\n",
      "Incertitude sans correlations 0.2790998350851877\n",
      "Incertitude avec correlations 0.10325894775854749\n"
     ]
    }
   ],
   "source": [
    "# Fonction de fit plus pretinente\n",
    "# Le parametre $b$ correspond au fit en l'an 2000\n",
    "def fit_function(x, a, b):\n",
    "    return a*(x-2000) + b\n",
    "\n",
    "p_opt, cor_mat = curve_fit(fit_function, x, y)\n",
    "a, b = p_opt\n",
    "\n",
    "sigma = np.sqrt(np.diag(cor_mat))\n",
    "sigma_a = sigma[0]\n",
    "sigma_b = sigma[1]\n",
    "\n",
    "x_test = 10\n",
    "\n",
    "print('Valeur en 2010 ', a*x_test + b)\n",
    "\n",
    "sigma_y = np.sqrt(x_test**2 * sigma_a**2 + sigma_b**2)\n",
    "print('Incertitude sans correlations', sigma_y)\n",
    "\n",
    "sigma_y = np.sqrt(x_test**2 * sigma_a**2 + sigma_b**2 + 2*x_test*cor_mat[1, 0])\n",
    "print('Incertitude avec correlations', sigma_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef50918e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
