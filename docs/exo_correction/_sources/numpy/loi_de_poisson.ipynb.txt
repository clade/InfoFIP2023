{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "be6e23a2",
   "metadata": {},
   "source": [
    "# Loi de poisson et générateur de nombre aléatoire\n",
    "\n",
    "_Cet exercice s'appuie sur un sujet de l'IPT, avec un méthode légèrement différente. Regarder :_ [Emergent Scientist 1, 7 (2017)](https://doi.org/10.1051/emsci/2017009)\n",
    "\n",
    "Une source lumineuse illumine un photomultiplicateur. Ce dispositif envoie un pulse digital d'environ 20 ns à chaque photon qu'il détecte. La sortie du photomultiplicateur est connectée à un dispositif informatique qui permet de compter le nombre de pulses reçu pendant une durée determinée.\n",
    "\n",
    "Le nombre de photons qui arrive pendant une durée donnée suit une loi de Poisson, c’est à dire que la probabilité de détecter $k$ photons est donnée par :\n",
    "\\begin{equation*}\n",
    "\\begin{split}p(k) = \\frac{\\lambda^k}{k!}e^{-\\lambda}\\end{split}\n",
    "\\end{equation*}\n",
    "où $\\lambda$ est le nombre moyen de photons. Le paramètre $\\lambda$ sera proportionnel à la durée $t_0$ pendant laquelle on mesure le nombre de photons : $\\lambda = \\Gamma t_0$.\n",
    "\n",
    "On rappelle que l’écart type de la loi de Poisson vaut $\\sqrt{\\lambda}$. \n",
    "\n",
    "Les données sont disponibles ici : {download}`data/100secondes_200us_count.txt`\n",
    "\n",
    "1. Le fichier de données est enregistré sous forme d’un fichier texte. Chaque point correspond à une mesure de durée $t_0=200\\mathrm{\\mu s}$. Lire le fichier sous forme d'un tableau d'entier: \n",
    "\n",
    "   Quel est le nombre moyen de photons reçu par seconde ?\n",
    "\n",
    "2. Calculer l’écart type et vérifiez qu’il vaut $\\sqrt{\\lambda}$.\n",
    "\n",
    "3. En utilisant la fonction `numpy.unique`, avec l’option `return_counts=True`, tracez la distribution de probabilité (créer un histogramme).\n",
    "\n",
    "4. Tracez les points représentants $p(k)/p(k+1)$.\n",
    "\n",
    "5. On peut créer un générateur de bits aléatoires à partir de cette séquence : si $x_{2j}>x_{2j+1}$ alors on prend 1, si $x_{2j}<x_{2j+1}$ on prend 0, sinon on élimine le point $j$.\n",
    "\n",
    "   Créer une fonction `bits_aleatoires(data)` qui engendrer cette suite de bits aléatoire que l’on appellera $a_j$ - une fois avec et sans de boucle `for`. Comparez les temps.\n",
    "\n",
    " \n",
    "6. On peut ensuite créer une suite de nombre aléatoire $\\{b_j\\}$ entre 0 et 1 en regroupant les bits $\\{a_i\\}$ dans une manière que $b_j$ soit écrit en binaire comme $(a_{Nj}, a_{Nj+1}, ... , a_{N(j+1) -1 })$. On prendra par exemple N=11.\n",
    "\n",
    "    \\begin{equation*}\n",
    "    b_j = \\sum_{i=0}^{i=N-1} \\frac{a_{Nj+i}}{2^{i+1}} \\in [0,1]\n",
    "    \\end{equation*}\n",
    "    Si $n=|\\{a_j\\}|$, le nombre d'elements dans la suite $\\{a_j\\}$, n'est pas divisible par $N$, supprimez les premiers $n\\%N$ elements.\n",
    "\n",
    "7. Si X et Y sont deux variables aléatoires ayant une distribution uniforme entre 0 et 1, alors on a\n",
    "    \\begin{equation*}\n",
    "    P(X^2 + Y^2<1) = \\frac{\\pi}{4}\n",
    "    \\end{equation*}\n",
    "    Déterminez $\\pi$ en utilisant notre générateur de nombre aléatoire.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501f2f54",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "--------------------------------------------------------------------------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "47644845",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "fichier = \"data/100secondes_200us_count.txt\"\n",
    "data = np.loadtxt(fichier, dtype=int) \n",
    "# data sous la forme d'un tableau de dimension 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ef866a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "flux_moyen: 22972.79 photons/s\n"
     ]
    }
   ],
   "source": [
    "# Question 1\n",
    "t0 = 200E-6\n",
    "flux_moyen = np.mean(data)/t0\n",
    "print(f'flux_moyen: {flux_moyen} photons/s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb3fd5f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deviation standard : 2.1401156007645943\n",
      "Racine carré de la moyenne : 2.1434920107152253\n"
     ]
    }
   ],
   "source": [
    "# Question 2\n",
    "print('Deviation standard :', data.std()) #  on peut aussi utiliser np.std(data)\n",
    "print('Racine carré de la moyenne :', np.sqrt(data.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c673b99f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Probabilité p(k)')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 3\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "values, count = np.unique(data, return_counts=True)\n",
    "\n",
    "fig = figure()\n",
    "ax = fig.subplots(1, 1)\n",
    "\n",
    "ax.plot(values, count/np.sum(count), '-o')\n",
    "ax.set_xlabel('Nombre de photon k')\n",
    "ax.set_ylabel('Probabilité p(k)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad913b90",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 4\n",
    "fig = figure()\n",
    "ax = fig.subplots(1, 1)\n",
    "\n",
    "ax.plot(count[:-1]/count[1:], 'o')\n",
    "ax.grid()\n",
    "ax.set_ylim(0, None)\n",
    "ax.set_xlabel('Nombre de photon k')\n",
    "ax.set_ylabel('$p(k)/p(k+1)$'); # Utilisation de Latex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba4a2585",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True,  True, ..., False, False,  True])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 5\n",
    "def bits_aleatoires(data):\n",
    "    # Il faut un nombre paire de point\n",
    "    data = data[(len(data)%2):]\n",
    "    A = data[::2]\n",
    "    B = data[1::2]\n",
    "    mask = (A!=B)\n",
    "    return (A>B)[mask]\n",
    "\n",
    "bits_aleatoires(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bad3bedf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 7\n",
    "\n",
    "data_bits = bits_aleatoires(data)\n",
    "N = 11\n",
    "\n",
    "data_bits = data_bits[len(data_bits)%N:]\n",
    "data_bits = data_bits.reshape((len(data_bits)//N, N))\n",
    "data_bits\n",
    "coef = 1/(2**(1+np.arange(N)))\n",
    "nb_aleatoires = (data_bits*coef[np.newaxis, :]).sum(axis=1) \n",
    "# np.newaxis permet de transformer le tableau de dimension 1 en un tableau de dimension 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8519fcce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.169305724725944"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 8\n",
    "\n",
    "nb_aleatoires = nb_aleatoires[len(nb_aleatoires)%2:] # on garde un nombre pair de points\n",
    "X = nb_aleatoires[::2] # indices pairs\n",
    "Y = nb_aleatoires[1::2] # indices impairs\n",
    "# The probability is the number of times a sample fullfills the condition \n",
    "# divided by the total number of samples\n",
    "np.sum(X**2 + Y**2 < 1)/len(X) * 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c207212",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
