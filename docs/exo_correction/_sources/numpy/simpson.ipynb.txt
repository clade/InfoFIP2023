{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "059e1855",
   "metadata": {},
   "source": [
    "# Formule de Simpson\n",
    "\n",
    "On rappelle la formule de Simpson pour le calcul approché d’une intégrale :\n",
    "\\begin{equation*}\n",
    "\\begin{split}\n",
    "\\int_a^bf(x)\\mathrm dx \\approx \\Delta_x\\sum_{i=0}^{N-1}\\frac{f(x_i) + 4f(x_i+\\frac{\\Delta_x}2) + f(x_i + \\Delta_x)}6 \\equiv I(f;a,b,N) \\end{split}\n",
    "\\end{equation*}\n",
    "où $\\Delta_x =\\frac{b-a}N$ et $x_i = a + i\\Delta_x$.\n",
    "  \n",
    "1. Ecrivez une fonction `simpson_slow` qui calcule l’intégrale d'une function $f$ entre $a$ et $b$ avec $N$ pas avec la méthode de Simpson en utilisant une boucle (for loop).\n",
    "\n",
    "2. Ecrivez une autre fonction `simpson_fast` qui fait la même chose sans utiliser de boucle (on suposera que la fonction $f$ est vectorisée).\n",
    "\n",
    "3. Calculez l’intégrale de $f(x) = \\frac{1}{1+x^2}$ entre 0 et 1 pour $N=1000$ et comparez le temps entre les deux fonctions en ecrirant `%timeit` avant la commande.\n",
    "\n",
    "4. Calculez la valeur théorique $I^\\star$ de l'intégrale et tracez en échelle logarithmique le residu $|I^\\star - I(f,0,1,N)|$ par rapport à $N$. Qu'elle est la vitesse de convergence de cette intégrale ?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501f2f54",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "--------------------------------------------------------------------------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d72954aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.\n",
    "\n",
    "def simpson_slow(f, a, b, N):\n",
    "    dx = (b-a)/N\n",
    "    x = a + np.arange(N)*dx\n",
    "    integral = 0\n",
    "    for i in range(N):\n",
    "        integral += (f(x[i]) + 4*f(x[i]+dx/2) + f(x[i]+dx))*dx/6\n",
    "    return integral"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4bc63934",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.\n",
    "\n",
    "def simpson_fast(f, a, b, N):\n",
    "    dx = (b-a)/N\n",
    "    x = a + np.arange(N)*dx\n",
    "    return np.sum(f(x) + 4*f(x+dx/2) + f(x+dx))*dx/6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "29e3de20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temps d'exécution pour simpson_slow:\n",
      "5.59 ms ± 250 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n",
      "\n",
      "\n",
      "Temps d'exécution pour simpson_fast:\n",
      "60.6 µs ± 708 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "# 3.\n",
    "\n",
    "def f(x):\n",
    "    return 1/(1+x**2)\n",
    "\n",
    "print(\"Temps d'exécution pour simpson_slow:\")\n",
    "%timeit simpson_slow(f, 0, 1, 1000)\n",
    "print('\\n')\n",
    "print(\"Temps d'exécution pour simpson_fast:\")\n",
    "%timeit simpson_fast(f, 0, 1, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d874f58",
   "metadata": {},
   "source": [
    "La solution analytique de l'intégrale est : $\\int_0^1 \\frac{dx}{1+x^2} = \\arctan(x)|_0^1 = \\pi/4$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d09700e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_array = np.arange(6,30)\n",
    "residuum = []\n",
    "for N in N_array:\n",
    "    residuum.append(np.pi/4-simpson_fast(f, a=0, b=1, N=N))\n",
    "# Remarque : utiliser une boucle for ici ne ralentit pas le code car\n",
    "# 1/ le calcul de simpson prend relativement beaucoup de temps\n",
    "# 2/ il y a moins de 30 itérations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d50c830",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fca3c2a9520>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4.\n",
    "\n",
    "plt.loglog(N_array, residuum, 'bo', label='Residuum')\n",
    "plt.title('Convergence de la méthode de Simpson')\n",
    "plt.grid(which = 'both')\n",
    "plt.ylabel('Residus')\n",
    "plt.xlabel('Nombre de pas N')\n",
    "\n",
    "TN = np.logspace(0.7, 1.5)\n",
    "plt.loglog(TN, residuum[0]*(N_array[0]/TN)**6, label='$1/N^6$')\n",
    "\n",
    "plt.legend()\n",
    "#gradient = np.polyfit(np.log(N_array), np.log(residuum), 1)[0]\n",
    "#print(f\"L'intégrale converge en res(N)~ N^({gradient:0.1f})\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
