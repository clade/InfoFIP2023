{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "82217a5e",
   "metadata": {},
   "source": [
    "# Vigicrue\n",
    "\n",
    "Le réseau de prévision des crues, dénommé Vigicrues, publie sur internet le relevé des stations situés le long de fleuves et rivières de France. \n",
    "\n",
    "Les données sont fournies au format JSON. Nous avons téléchargé un fichier qui contient des données d'une station située en Indre-et-loire {download}`data/vigicrue.json`. Ce fichier contient un dictionnaire\n",
    "\n",
    "1. Lire le fichier. Quels sont les clés de ce dictionnaire ? \n",
    "\n",
    "2. On s'interesse au contenu \"Serie\" de ce dictionnaire qui est aussi un dictionnaire. La clé \"LbStationHydro\" contient la commune où la mesure à été prise. Donner le nom de cette commune ?\n",
    "\n",
    "Les données qui nous interessent sont repérées par le clé \"ObssHydro\". La variable \"DtObsHydro\" contient le temps UNIX en milisecondes (temps depuis le 1 janvier 1970). La variable \"ResObsHydro\" la hauteur par rapport à une référence en $m$. Le jeu de donnée commence vers le 12 avril 2023 (temps unix de 1681257600 s)\n",
    "\n",
    "\n",
    "3. Extraire le temps et l'enregistrer en heure par rapport au 12 avril 2023. \n",
    "\n",
    "4. Tracer la hauteur en fonction du temps par rapport à l'instant présent\n",
    "\n",
    "5. A quel jour correspond le maximum sur cette période ?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501f2f54",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "--------------------------------------------------------------------------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71477374",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "with open('data/vigicrue.json') as f:\n",
    "    data = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "58883360",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['VersionFlux', 'Serie'])\n",
      "dict_keys(['CdStationHydro', 'LbStationHydro', 'Link', 'GrdSerie', 'ObssHydro'])\n"
     ]
    }
   ],
   "source": [
    "print(data.keys())\n",
    "print(data['Serie'].keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "95d123dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nouâtre\n"
     ]
    }
   ],
   "source": [
    "print(data['Serie']['LbStationHydro'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ee8c6cb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "temps_mesure = []\n",
    "hauteur = []\n",
    "for mesure in data['Serie']['ObssHydro']:\n",
    "    temps_mesure.append(mesure[\"DtObsHydro\"])\n",
    "    hauteur.append(mesure['ResObsHydro'])\n",
    "    \n",
    "temps_mesure = (np.array(temps_mesure) - 1681257600000)/3600000\n",
    "hauteur = np.array(hauteur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "59745d35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "\n",
    "fig = figure()\n",
    "ax = fig.subplots(1, 1)\n",
    "\n",
    "ax.plot(temps_mesure, hauteur)\n",
    "ax.set_ylabel('Hauteur [m]')\n",
    "ax.set_ylabel('T [h]');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "652c39b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.6875\n"
     ]
    }
   ],
   "source": [
    "h_max = temps_mesure[np.argmax(hauteur)]\n",
    "j_max = h_max/24\n",
    "print(j_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2af2de86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Le jour du maximum est le 16 avril 2023"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
