{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ec3ef63a",
   "metadata": {},
   "source": [
    "# Analyse des données du CAC 40\n",
    "\n",
    "L'objectif de cet exercice est de manipuler des données à l'aide de liste et de dictionnaire (sans utiliser de tableaux numpy).\n",
    "\n",
    "Télécharger depuis le site https://fr.finance.yahoo.com/quote/%5EFCHI/history/ les données du CAC 40 depuis 3 ans. Le fichier obtenu contient : la date, le cours d'ouverture, le plus haut, le plus bas, le cours de clôture, le cours de clôture ajusté et le volume de titres échangés. Ce contenu est séparé par des `,`.\n",
    "\n",
    "Remarque : la méthode `split` d'une chaine de caractère permet de la séparer en plusieurs sous chaînes. Par exemple : \n",
    "\n",
    "```\n",
    "s = '12,bonjour,3.14'\n",
    "print(s.split(','))\n",
    "```\n",
    "\n",
    "On suprimera la première ligne du fichier.\n",
    "\n",
    "1. Afficher les 10 premières lignes du fichier\n",
    "\n",
    "2. Créer une liste contenant le plus haut de la bourse jour par jour. Qu'elle est la valeur la plus haute du CAC 40 ?\n",
    "\n",
    "3. Écrire une fonction qui prend le jour, le mois et l'année et renvoie une chaîne de caractère pour la date sous la forme : aaaa-mm-jj (par exemple 1515-09-13)\n",
    "\n",
    "4. Écrire une fonction qui renvoie le plus bas d'une journée à partir du jour, du mois et de l'année. Cette fonction renverra une exception si le jour n'existe pas. \n",
    "\n",
    "5. Plutôt qu'une liste, on va utiliser un dictionnaire dont la clé sera la date. Créer un dictionnaire qui contiendra pour chaque jour un dictionnaire avec pour clé : 'haut', 'bas', 'ouverture', 'fermeture', 'volume'. Par exemple on pourra utiliser :\n",
    "  ```cac_40['2020-10-05']['haut']```\n",
    "\n",
    "6. Enregistrer ce dictionnaire dans un fichier au format json. Vérifier que vous pouvez l'ouvrir !\n",
    "\n",
    "7. Regarder la documentation de la fonction ``parse`` du module ``dateutil.parser`` et trouver le moyen de convertir une date sous la forme ``2020-10-05`` en un nombre (nombre de jour ou nombre de seconde depuis une date donnée). \n",
    "\n",
    "8. Tracer l'évolution au cours du temps de CAC 40."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501f2f54",
   "metadata": {
    "tags": [
     "sol"
    ]
   },
   "source": [
    "--------------------------------------------------------------------------------------\n",
    "\n",
    "## Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93fe5bad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-07-30,4952.080078,4952.379883,4801.020020,4852.939941,4852.939941,137065700\n",
      "2020-07-31,4866.240234,4902.899902,4783.689941,4783.689941,4783.689941,129676300\n",
      "2020-08-03,4797.060059,4899.520020,4763.600098,4875.930176,4875.930176,104619900\n",
      "2020-08-04,4905.660156,4920.799805,4856.649902,4889.520020,4889.520020,86945300\n",
      "2020-08-05,4916.959961,4954.600098,4907.410156,4933.339844,4933.339844,74970100\n",
      "2020-08-06,4919.410156,4951.859863,4860.979980,4885.129883,4885.129883,80015300\n",
      "2020-08-07,4873.100098,4896.209961,4843.899902,4889.520020,4889.520020,62365400\n",
      "2020-08-10,4905.270020,4937.629883,4878.580078,4909.509766,4909.509766,62044500\n",
      "2020-08-11,4952.410156,5052.120117,4949.049805,5027.990234,5027.990234,97809400\n",
      "2020-08-12,5017.729980,5096.529785,5010.799805,5073.310059,5073.310059,76792800\n"
     ]
    }
   ],
   "source": [
    "with open('data/cac40.csv') as f:\n",
    "    toutes_les_lignes = f.readlines()\n",
    "\n",
    "toutes_les_lignes = toutes_les_lignes[1:]\n",
    "    \n",
    "for elm in toutes_les_lignes[:10]:\n",
    "    print(elm.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2e5d0541",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7581.259766"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plus_haut = []\n",
    "for elm in toutes_les_lignes:\n",
    "    plus_haut.append(float(elm.split(',')[2]))\n",
    "\n",
    "max(plus_haut) # Remarque : ne pas coder soi même la fonction max!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4d6e7704",
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_date(jour, mois, annee):\n",
    "    \"\"\"Formate la date sous la forme : jj/mm/aa\n",
    "    \"\"\"\n",
    "    return f\"{annee:04d}-{mois:02d}-{jour:02d}\"\n",
    "\n",
    "# 02d : écriture decimale, 2 chiffres en tout, mettre des 0 devant \n",
    "\n",
    "assert format_date(13, 9, 1515)=='1515-09-13'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5bc1f15e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4842.259766\n"
     ]
    }
   ],
   "source": [
    "def plus_bas(jour, mois, annee):\n",
    "    date_demandee = format_date(jour, mois, annee)\n",
    "    for elm in toutes_les_lignes:\n",
    "        date, ouverture, haut, bas, fermeture, fermeture_ajust, volume = elm.split(',')\n",
    "        if date==date_demandee:\n",
    "            return float(bas)\n",
    "    raise Exception(f\"La date {date_demandee} n'a pas pu être trouvée\")\n",
    "\n",
    "print(plus_bas(5, 10, 2020))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "770a3ba5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4871.870117"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cac_40 = {}\n",
    "for elm in toutes_les_lignes:\n",
    "    date, ouverture, haut, bas, fermeture, fermeture_ajust, volume = elm.split(',')\n",
    "    line = {\n",
    "        'ouverture':float(ouverture),\n",
    "        'haut' : float(haut),\n",
    "        'bas' : float(bas),\n",
    "        'fermeture' : float(fermeture),\n",
    "        'volume' : int(volume)\n",
    "    }\n",
    "    cac_40[date] = line\n",
    "    \n",
    "cac_40['2020-10-05']['fermeture']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "481c69d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "with open('/tmp/cac_40.json', 'w') as f:\n",
    "    json.dump(cac_40, f, indent=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa84bd82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4871.870117"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open('/tmp/cac_40.json') as f:\n",
    "    tmp = json.load(f)\n",
    "    \n",
    "    \n",
    "tmp['2020-10-05']['fermeture']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4b80f4be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "737703\n"
     ]
    }
   ],
   "source": [
    "from dateutil.parser import parse\n",
    "day = parse('2020-10-05')\n",
    "\n",
    "print(day.toordinal())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "692a2bc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_day = []\n",
    "list_of_ouverture = []\n",
    "for key, elm in cac_40.items():\n",
    "    list_of_day.append(parse(key).toordinal())\n",
    "    list_of_ouverture.append(elm['ouverture'])\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "05000250",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f11fc6d2d30>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(list_of_day, list_of_ouverture)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "942de537",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
