{"cells": [{"cell_type": "markdown", "id": "ec3ef63a", "metadata": {}, "source": ["# Analyse des donn\u00e9es du CAC 40\n", "\n", "L'objectif de cet exercice est de manipuler des donn\u00e9es \u00e0 l'aide de listes et de dictionnaires (sans utiliser de tableaux numpy).\n", "\n", "T\u00e9l\u00e9charger depuis le site https://fr.finance.yahoo.com/quote/%5EFCHI/history/ les donn\u00e9es du CAC 40 depuis 3 ans. Le fichier obtenu contient : la date, le cours d'ouverture, le plus haut, le plus bas, le cours de cl\u00f4ture, le cours de cl\u00f4ture ajust\u00e9 et le volume de titres \u00e9chang\u00e9s. Ce contenu est s\u00e9par\u00e9 par des `,`.\n", "\n", "Remarque : la m\u00e9thode `split` d'une chaine de caract\u00e8re permet de la s\u00e9parer en plusieurs sous cha\u00eenes. Par exemple : \n", "\n", "```\n", "s = '12,bonjour,3.14'\n", "print(s.split(','))\n", "```\n", "\n", "On suprimera la premi\u00e8re ligne du fichier.\n", "\n", "1. Afficher les 10 premi\u00e8res lignes du fichier\n", "\n", "2. Cr\u00e9er une liste contenant le plus haut de la bourse jour par jour. Qu'elle est la valeur la plus haute du CAC 40 ?\n", "\n", "3. \u00c9crire une fonction qui prend le jour, le mois et l'ann\u00e9e et renvoie une cha\u00eene de caract\u00e8re pour la date sous la forme : aaaa-mm-jj (par exemple 1515-09-13)\n", "\n", "4. \u00c9crire une fonction qui renvoie le plus bas d'une journ\u00e9e \u00e0 partir du jour, du mois et de l'ann\u00e9e. Cette fonction renverra une exception si le jour n'existe pas. \n", "\n", "5. Plut\u00f4t qu'une liste, on va utiliser un dictionnaire dont la cl\u00e9 sera la date. Cr\u00e9er un dictionnaire qui contiendra pour chaque jour un dictionnaire avec pour cl\u00e9 : 'haut', 'bas', 'ouverture', 'fermeture', 'volume'. Par exemple on pourra utiliser :\n", "  ```cac_40['2020-10-05']['haut']```\n", "\n", "6. Enregistrer ce dictionnaire dans un fichier au format json. V\u00e9rifier que vous pouvez l'ouvrir !\n", "\n", "7. Regarder la documentation de la fonction ``parse`` du module ``dateutil.parser`` et trouver le moyen de convertir une date sous la forme ``2020-10-05`` en un nombre (nombre de jour ou nombre de seconde depuis une date donn\u00e9e). \n", "\n", "8. Tracer l'\u00e9volution au cours du temps de CAC 40."]}], "metadata": {"celltoolbar": "Tags", "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.8"}, "varInspector": {"cols": {"lenName": 16, "lenType": 16, "lenVar": 40}, "kernels_config": {"python": {"delete_cmd_postfix": "", "delete_cmd_prefix": "del ", "library": "var_list.py", "varRefreshCmd": "print(var_dic_list())"}, "r": {"delete_cmd_postfix": ") ", "delete_cmd_prefix": "rm(", "library": "var_list.r", "varRefreshCmd": "cat(var_dic_list()) "}}, "types_to_exclude": ["module", "function", "builtin_function_or_method", "instance", "_Feature"], "window_display": false}}, "nbformat": 4, "nbformat_minor": 5}