{"cells": [{"cell_type": "markdown", "id": "be6e23a2", "metadata": {}, "source": ["# Loi de poisson et g\u00e9n\u00e9rateur de nombre al\u00e9atoire\n", "\n", "_Cet exercice s'appuie sur un sujet de l'IPT, avec un m\u00e9thode l\u00e9g\u00e8rement diff\u00e9rente. Regarder :_ [Emergent Scientist 1, 7 (2017)](https://doi.org/10.1051/emsci/2017009)\n", "\n", "Une source lumineuse illumine un photomultiplicateur. Ce dispositif envoie un pulse digital d'environ 20 ns \u00e0 chaque photon qu'il d\u00e9tecte. La sortie du photomultiplicateur est connect\u00e9e \u00e0 un dispositif informatique qui permet de compter le nombre de pulses re\u00e7u pendant une dur\u00e9e determin\u00e9e.\n", "\n", "Le nombre de photons qui arrive pendant une dur\u00e9e donn\u00e9e suit une loi de Poisson, c\u2019est \u00e0 dire que la probabilit\u00e9 de d\u00e9tecter $k$ photons est donn\u00e9e par :\n", "\\begin{equation*}\n", "\\begin{split}p(k) = \\frac{\\lambda^k}{k!}e^{-\\lambda}\\end{split}\n", "\\end{equation*}\n", "o\u00f9 $\\lambda$ est le nombre moyen de photons. Le param\u00e8tre $\\lambda$ sera proportionnel \u00e0 la dur\u00e9e $t_0$ pendant laquelle on mesure le nombre de photons : $\\lambda = \\Gamma t_0$.\n", "\n", "On rappelle que l\u2019\u00e9cart type de la loi de Poisson vaut $\\sqrt{\\lambda}$. \n", "\n", "Les donn\u00e9es sont disponibles ici : {download}`data/100secondes_200us_count.txt`\n", "\n", "1. Le fichier de donn\u00e9es est enregistr\u00e9 sous forme d\u2019un fichier texte. Chaque point correspond \u00e0 une mesure de dur\u00e9e $t_0=200\\mathrm{\\mu s}$. Lire le fichier sous forme d'un tableau d'entier: \n", "\n", "   Quel est le nombre moyen de photons re\u00e7u par seconde ?\n", "\n", "2. Calculer l\u2019\u00e9cart type et v\u00e9rifiez qu\u2019il vaut $\\sqrt{\\lambda}$.\n", "\n", "3. En utilisant la fonction `numpy.unique`, avec l\u2019option `return_counts=True`, tracez la distribution de probabilit\u00e9 (cr\u00e9er un histogramme).\n", "\n", "4. Tracez les points repr\u00e9sentants $p(k)/p(k+1)$.\n", "\n", "5. On peut cr\u00e9er un g\u00e9n\u00e9rateur de bits al\u00e9atoires \u00e0 partir de cette s\u00e9quence : si $x_{2j}>x_{2j+1}$ alors on prend 1, si $x_{2j}<x_{2j+1}$ on prend 0, sinon on \u00e9limine le point $j$.\n", "\n", "   Cr\u00e9er une fonction `bits_aleatoires(data)` qui engendrer cette suite de bits al\u00e9atoire que l\u2019on appellera $a_j$ - une fois avec et sans de boucle `for`. Comparez les temps.\n", "\n", " \n", "6. On peut ensuite cr\u00e9er une suite de nombre al\u00e9atoire $\\{b_j\\}$ entre 0 et 1 en regroupant les bits $\\{a_i\\}$ dans une mani\u00e8re que $b_j$ soit \u00e9crit en binaire comme $(a_{Nj}, a_{Nj+1}, ... , a_{N(j+1) -1 })$. On prendra par exemple N=11.\n", "\n", "    \\begin{equation*}\n", "    b_j = \\sum_{i=0}^{i=N-1} \\frac{a_{Nj+i}}{2^{i+1}} \\in [0,1]\n", "    \\end{equation*}\n", "    Si $n=|\\{a_j\\}|$, le nombre d'elements dans la suite $\\{a_j\\}$, n'est pas divisible par $N$, supprimez les premiers $n\\%N$ elements.\n", "\n", "7. Si X et Y sont deux variables al\u00e9atoires ayant une distribution uniforme entre 0 et 1, alors on a\n", "    \\begin{equation*}\n", "    P(X^2 + Y^2<1) = \\frac{\\pi}{4}\n", "    \\end{equation*}\n", "    D\u00e9terminez $\\pi$ en utilisant notre g\u00e9n\u00e9rateur de nombre al\u00e9atoire.\n"]}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.8"}, "varInspector": {"cols": {"lenName": 16, "lenType": 16, "lenVar": 40}, "kernels_config": {"python": {"delete_cmd_postfix": "", "delete_cmd_prefix": "del ", "library": "var_list.py", "varRefreshCmd": "print(var_dic_list())"}, "r": {"delete_cmd_postfix": ") ", "delete_cmd_prefix": "rm(", "library": "var_list.r", "varRefreshCmd": "cat(var_dic_list()) "}}, "types_to_exclude": ["module", "function", "builtin_function_or_method", "instance", "_Feature"], "window_display": false}}, "nbformat": 4, "nbformat_minor": 5}